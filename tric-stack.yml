# docker-compose configuration file used to run cross-activation tests.

version: "3"

networks:
  tric:
    ipam:
      driver: default
      config:
        - subnet: "172.${TRIC_TEST_SUBNET:-28}.0.0/16"

volumes:
  function-mocker-cache:

services:

  db:
    image: mariadb
    networks:
      - tric
    environment:
      MYSQL_DATABASE: test
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root}

  wordpress:
    image: tric/wordpress
    build:
      context: containers/wordpress
      # By default, build the version of Docker that does not include XDebug.
      dockerfile: ${TRIC_WORDPRESS_DOCKERFILE:-Dockerfile.debug}
      args:
        # Fix the version of the WordPress image to avoid issues w/ out-of-date database dumps.
        WORDPRESS_IMAGE_VERSION: 5.5-apache
        # Allow the image to be built creating the user and group ID for the host machine user.
        DOCKER_RUN_UID: ${DOCKER_RUN_UID:-0}
        DOCKER_RUN_GID: ${DOCKER_RUN_GID:-0}
    networks:
      tric:
        # Allow the other containers to read this container with a pretty URL.
        ipv4_address: 172.${TRIC_TEST_SUBNET:-28}.1.1
    extra_hosts:
      # Let's make sure the WordPress service can reach itself with a pretty URL for internal requests.
      - "wordpress.test:172.${TRIC_TEST_SUBNET:-28}.1.1"
    depends_on:
      - db
      - redis
    # Run the container as the host user and group.
    # Apache will run as the same user and permission issues with WordPress generated files should not arise.
    user: "${DOCKER_RUN_UID:-}:${DOCKER_RUN_GID:-}"
    sysctls:
      # Allow any user to bind ports <= 1024.
      # This is required as we're running the container as the host user and that user might not be in the root
      # wheel in the container.
      net.ipv4.ip_unprivileged_port_start: 0
    ports:
      # Allow reaching the site at `http://localhost:8888`.
      # The port, in the container, is not the default `80` to allow non root users to bind (listen) to it.
      - "${WORDPRESS_HTTP_PORT:-8888}:80"
    environment:
      WORDPRESS_DB_USER: root
      WORDPRESS_DB_PASSWORD: password
      # This db is created by the db container at startup, no need to create it.
      WORDPRESS_DB_NAME: test
      WORDPRESS_DB_HOST: db
      WORDPRESS_DEBUG: 1
      # Pull plugins from the `/plugins` directory to allow debugging the files we're working on.
      WORDPRESS_CONFIG_EXTRA: |
        $$scheme = empty( $$_SERVER['HTTPS'] ) ? 'http' : 'https';
        $$url    = isset( $$_SERVER['HTTP_HOST'] ) ? $$_SERVER['HTTP_HOST'] : 'wordpress.test';
        define( 'WP_HOME', $$scheme . '://' . $$url );
        define( 'WP_SITEURL', $$scheme . '://' . $$url );
        define( 'WP_REDIS_HOST', 'redis' );
        define( 'WP_REDIS_PORT', 6379 );
        define( 'TRIBE_NO_FREEMIUS', true );
        define( 'WP_DEBUG_DISPLAY', true );
        define( 'WP_DEBUG_LOG', true );
      # Configure this to debug the tests with XDebug.
      # Map the `_wordpress` directory to `/var/www/html' directory in your IDE of choice.
      # Map the `_plugins` directory to `/plugins` directory in your IDE of choice.
      PHP_IDE_CONFIG: "serverName=${XDK:-tric}"
      # The `remote_host` is set to `host.docker.internal` that will resolve to the host machine IP address, from
      # within the container, on macOS and Windows.
      # On Linux set the host machine IP address before calling the stack:
      # XDH=$(ip route | grep docker0 | awk '{print $9}') docker-compose ...
      XDEBUG_CONFIG: "idekey=${XDK:-tric} remote_enable=${XDE:-1} remote_host=${XDH:-host.docker.internal} remote_port=${XDP:-9001}"
      # Whether to disable the XDebug extension in the Codeception container completely or not.
      XDEBUG_DISABLE: "${XDEBUG_DISABLE:-0}"
    volumes:
      # Paths are relative to the directory that contains this file, NOT the current working directory.
      # Share the WordPress core installation files in the `_wordpress` directory.
      - ${TRIC_WP_DIR}:/var/www/html:cached
      # Share the WordPress core installation files in the `_plugins` directory.
      - ${TRIC_PLUGINS_DIR}:/var/www/html/wp-content/plugins:cached
      - ${TRIC_THEMES_DIR}:/var/www/html/wp-content/themes:cached

  cli:
    image: wordpress:cli
    user: "${DOCKER_RUN_UID:-}:${DOCKER_RUN_GID:-}"
    networks:
      - tric
    environment:
      FIXUID: "${FIXUID:-1}"
      # Configure this to debug the tests with XDebug.
      # Map the `_wordpress` directory to `/var/www/html' directory in your IDE of choice.
      # Map the `_plugins` directory to `/plugins' directory in your IDE of choice.
      PHP_IDE_CONFIG: "serverName=${XDK:-tric}"
      # The `remote_host` is set to `host.docker.internal` that will resolve to the host machine IP address, from
      # within the container, on macOS and Windows.
      # On Linux set the host machine IP address before calling the stack:
      # XDH=$(ip route | grep docker0 | awk '{print $9}') docker-compose ...
      XDEBUG_CONFIG: "idekey=${XDK:-tric} remote_enable=${XDE:-1} remote_host=${XDH:-host.docker.internal} remote_port=${XDP:-9001}"
    volumes:
      # Paths are relative to the directory that contains this file, NOT the current working directory.
      # Share the WordPress core installation files in the `_wordpress` directory.
      - ${TRIC_WP_DIR}:/var/www/html:cached
      # Share the WordPress core installation files in the `_plugins` directory.
      - ${TRIC_PLUGINS_DIR}:/var/www/html/wp-content/plugins:cached
      - ${TRIC_THEMES_DIR}:/var/www/html/wp-content/themes:cached

  site-cli:
    image: wordpress:cli
    user: "${DOCKER_RUN_UID:-}:${DOCKER_RUN_GID:-}"
    networks:
      - tric
    extra_hosts:
      - "wordpress.test:172.${TRIC_TEST_SUBNET:-28}.1.1"
    environment:
      FIXUID: "${FIXUID:-1}"
      # Configure this to debug the tests with XDebug.
      # Map the `_wordpress` directory to `/var/www/html' directory in your IDE of choice.
      # Map the `_plugins` directory to `/plugins' directory in your IDE of choice.
      PHP_IDE_CONFIG: "serverName=${XDK:-tric}"
      # The `remote_host` is set to `host.docker.internal` that will resolve to the host machine IP address, from
      # within the container, on macOS and Windows.
      # On Linux set the host machine IP address before calling the stack:
      # XDH=$(ip route | grep docker0 | awk '{print $9}') docker-compose ...
      XDEBUG_CONFIG: "idekey=${XDK:-tric} remote_enable=${XDE:-1} remote_host=${XDH:-host.docker.internal} remote_port=${XDP:-9001}"
    depends_on:
      - wordpress
    # Override the default entrypoint to wait for the WordPress container, and required services to be up and running.
    # Then run the default entrypoint with a command read from the environment variables.
    # When overriding the `entrypoint` the `CMD` defined in the image, and an overriding `command`, will be ignored
    # and this requires the entrypoint to contain the command we want to run (`TRIC_SITE_CLI_COMMAND`) already.
    # see https://docs.docker.com/compose/compose-file/#entrypoint
    entrypoint:
      - /bin/bash
      - -c
      - |
        printf "Waiting for WordPress site ";
        until $$(curl -o /dev/null -f -s -I wordpress.test:80); do printf '.' && sleep 1; done
        echo -e -n " \e[32mdone\e[0m\n"
        echo "Executing command: ${TRIC_SITE_CLI_COMMAND:-core version}"
        docker-entrypoint.sh ${TRIC_SITE_CLI_COMMAND:-core version}
    volumes:
      # Paths are relative to the directory that contains this file, NOT the current working directory.
      # Share the WordPress core installation files in the `_wordpress` directory.
      - ${TRIC_WP_DIR}:/var/www/html:cached
      # Share the WordPress core installation files in the `_plugins` directory.
      - ${TRIC_PLUGINS_DIR}:/var/www/html/wp-content/plugins:cached
      - ${TRIC_THEMES_DIR}:/var/www/html/wp-content/themes:cached

  site_waiter:
    # Waits for the WordPress site to be available.
    image: curlimages/curl
    networks:
      - tric
    extra_hosts:
      - "wordpress.test:172.${TRIC_TEST_SUBNET:-28}.1.1"
    command: -Lkfv --retry-connrefused --retry 30 --retry-delay 1 -o /dev/null --stderr /dev/null wordpress.test:80

  chrome:
    image: selenium/standalone-chrome:4.0.0
    networks:
      - tric
    extra_hosts:
      - "wordpress.test:172.${TRIC_TEST_SUBNET:-28}.1.1"

  codeception:
    image: lucatume/codeception:cc3.1.0
    networks:
      - tric
    extra_hosts:
      - "wordpress.test:172.${TRIC_TEST_SUBNET:-28}.1.1"
    user: "${DOCKER_RUN_UID:-}:${DOCKER_RUN_GID:-}"
    environment:
      FIXUID: "${FIXUID:-1}"
      # Set these values to allow the container to look wordpress up.
      WORDPRESS_DB_USER: root
      WORDPRESS_DB_PASSWORD: password
      WORDPRESS_DB_NAME: test
      WORDPRESS_DB_HOST: db
      WORDPRESS_URL: http://wordpress.test
      # Configure this to debug the tests with XDebug.
      # Map the `_wordpress` directory to `/var/www/html' directory in your IDE of choice.
      # Map the `_plugins` directory to `/plugins' directory in your IDE of choice.
      PHP_IDE_CONFIG: "serverName=${XDK:-tric}"
      # The `remote_host` is set to `host.docker.internal` that will resolve to the host machine IP address, from
      # within the container, on macOS and Windows.
      # On Linux set the host machine IP address before calling the stack:
      # XDH=$(ip route | grep docker0 | awk '{print $9}') docker-compose ...
      XDEBUG_CONFIG: "idekey=${XDK:-tric} remote_enable=${XDE:-1} remote_host=${XDH:-host.docker.internal} remote_port=${XDP:-9001}"
      # Move to the target directory before running the command from the plugins directory.
      CODECEPTION_PROJECT_DIR: /var/www/html/wp-content/plugins/${TRIC_CURRENT_PROJECT:-test}/${TRIC_CURRENT_PROJECT_SUBDIR:-}
      # When running the container in shell mode (using the tric `shell` command), then use this CC configuration.
      CODECEPTION_SHELL_CONFIG: "-c codeception.tric.yml"
      # Whether to disable the XDebug extension in the Codeception container completely or not.
      XDEBUG_DISABLE: "${XDEBUG_DISABLE:-0}"
      # Declare that we are in a tric context so plugins can set custom test configs.
      TRIBE_TRIC: 1
      # If we're in CI context, then pass it through.
      CI: "${CI:-}"
      # Let's set the lines and columns number explicitly to have the shell mirror the current one.
      LINES: "${LINES:-24}"
      COLUMNS: "${COLUMNS:-80}"
      # Explicitly set the env var that will define the Function Mocker cache path: it will be picked up by the config file.
      FUNCTION_MOCKER_CACHE_PATH: "/cache"
    depends_on:
      - wordpress
      - chrome
    volumes:
      # Paths are relative to the directory that contains this file, NOT the current working directory.
      # Share the WordPress core installation files in the `_wordpress` directory.
      - ${TRIC_WP_DIR}:/var/www/html:cached
      # Share the plugins in the `/var/www/hmtl/wp-content/plugins` directory.
      - ${TRIC_PLUGINS_DIR}:/var/www/html/wp-content/plugins:cached
      - ${TRIC_THEMES_DIR}:/var/www/html/wp-content/themes:cached
      # In some plugins we use function-mocker and set it up to cache in `/tmp/function-mocker`.
      # To avoid a long re-caching on each run, let's cache in a docker volume, caching on the host
      # filesystem would be a worse cure than the disease.
      # The volume is bound to the `a+rwx` directory the `codeception` image provides to avoid file mode issues.
      - function-mocker-cache:/cache

  composer:
    image: lucatume/composer:php7.0
    user: "${DOCKER_RUN_UID:-}:${DOCKER_RUN_GID:-}"
    environment:
      FIXUID: "${FIXUID:-1}"
    volumes:
      # Set the current plugin as project.
      - ${TRIC_PLUGINS_DIR}/${TRIC_CURRENT_PROJECT:-test}/${TRIC_CURRENT_PROJECT_SUBDIR:-}:/project:cached
      # Share SSH keys with the container to pull from private repositories.
      - ${DOCKER_RUN_SSH_AUTH_SOCK}:/ssh-agent:ro

  npm:
    build:
      context: containers/npm
      args:
        NODE_VERSION: 8.9
    image: tric_npm
    user: "${DOCKER_RUN_UID:-}:${DOCKER_RUN_GID:-}"
    environment:
      FIXUID: ${FIXUID:-1}
      TRIC_CURRENT_PROJECT_SUBDIR: ${TRIC_CURRENT_PROJECT_SUBDIR:-}
    volumes:
      # Set the current plugin as project.
      - ${TRIC_PLUGINS_DIR}/${TRIC_CURRENT_PROJECT:-test}:/project:cached
      # Share SSH keys with the container to pull from private repositories.
      - ${DOCKER_RUN_SSH_AUTH_SOCK}:/ssh-agent:ro

  npm_lts:
    build:
      context: containers/npm
      args:
        NODE_VERSION: lts
    image: tric_npm_lts
    user: "${DOCKER_RUN_UID:-}:${DOCKER_RUN_GID:-}"
    environment:
      FIXUID: ${FIXUID:-1}
      TRIC_CURRENT_PROJECT_SUBDIR: ${TRIC_CURRENT_PROJECT_SUBDIR:-}
    volumes:
      # Set the current plugin as project.
      - ${TRIC_PLUGINS_DIR}/${TRIC_CURRENT_PROJECT:-test}:/project:cached
      # Share SSH keys with the container to pull from private repositories.
      - ${DOCKER_RUN_SSH_AUTH_SOCK}:/ssh-agent:ro

  php:
    image: php:7.4-cli
    user: "${DOCKER_RUN_UID:-}:${DOCKER_RUN_GID:-}"
    environment:
      FIXUID: ${FIXUID:-1}
    working_dir: /project
    volumes:
      # Set the current plugin as project.
      - ${TRIC_PLUGINS_DIR}/${TRIC_CURRENT_PROJECT:-test}/${TRIC_CURRENT_PROJECT_SUBDIR:-}:/project:cached
      # Share SSH keys with the container to pull from private repositories.
      - ${DOCKER_RUN_SSH_AUTH_SOCK}:/ssh-agent:ro

  adminer:
    image: adminer
    networks:
      - tric
    environment:
      ADMINER_DEFAULT_SERVER: db
    ports:
      - "9080:8080"

  redis:
    image: redis
    networks:
      tric:
    ports:
      # Expose Redis port on port 8379 of localhost.
      - "8379:6379"

  redis-cli:
    image: redis
    networks:
      tric:
    depends_on:
      - redis
    entrypoint: ["redis-cli","-h redis","-p 6379"]
    command: ["--version"]
